package kforth

import kforth.assembler.Assembler
import kforth.vm.Vm
import java.math.BigInteger

fun main() {
    val code1 = Assembler()
        .read()
        .label("loop")
        .broadcast()
        .read()
        .const(-1)
        .add()
        .dup()
        .zjp("_stop")
        .jmp("loop")
        .assemble()
    println(code1)

    val code2 = Assembler()
        .read()
        .broadcast()
        .jmp("_start")
        .assemble()
    println(code2)

    val code3 = Assembler()
        .jmp("main")
        .label("countdown")
        .dup()
        .zjp("countdown.end")
        .const(-1)
        .add()
        .call("countdown")
        .label("countdown.end")
        .ret()
        .label("add-one")
        .const(1)
        .add()
        .ret()
        .label("add-two")
        .const(2)
        .add()
        .ret()
        .label("main")
        .const(0)
        .call("add-two")
        .call("add-one")
        .call("countdown")
        .drop()
        .assemble()
    println(code3)

    val vm = Vm()
    vm.debug = true
    vm.run(code1, id = BigInteger("MAIN", 36))
    vm.run(code2, id = BigInteger("ECHO", 36))
    vm.run(code3)

    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.send(BigInteger.ZERO, BigInteger("MAIN", 36), BigInteger.TEN)
    vm.step()
    vm.step()

    val code4 = Assembler()
        .const(1)
        .sta()
        .const(30)
        .label("loop")
        .dup()
        .zjp("output")
        .dup()
        .lda()
        .multiply()
        .sta()
        .const(1)
        .negate()
        .add()
        .jmp("loop")
        .label("output")
        .drop()
        .const(0)
        .lda()
        .send()
        .assemble()
    println(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)
    vm.run(code4)

    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()


    val code5 = Assembler()
        .spawn("worker")
        .dup()
        .const(0)
        .send()
        .dup()
        .const(55)
        .send()
        .const(55)
        .const(21)
        .modulo()
        .send()
        .jmp("_stop")
        .label("worker")
        .read()
        .label("worker.loop")
        .dup()
        .read()
        .send()
        .jmp("worker.loop")
        .assemble()
    println(code5)

    vm.run(code5)

    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
    vm.step()
}
